@page "/product"
@inject HttpClient client
@inject IJSRuntime js
@inject HttpClient http

@inject ICookieService cookieService

<h3>Product</h3>
<div>
    <a class="btn btn-success" href="product/create">Create</a>
</div>


<div style="" class="d-sm-flex justify-content-around p-5">
    <div class="input-group">
        <div class="form-outline">
            <input @bind="@searchBarInput" class="form-control" placeholder="Search" />
        </div>
        <button type="button" class="btn btn-primary" @onclick="RefreshProducts">
            <span class="oi oi-compass" aria-hidden="true"></span>
        </button>
    </div>
</div>

<table class="table">
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Description</th>
        <th>Price</th>
        <th>IsAvailable</th>
        <th></th>
    </tr>
    @foreach (var product in Dtos)
    {
        <tr>
            <td>@product.Id</td>
            <td>@product.Name</td>
            <td>@product.Description</td>
            <td>@product.Price</td>
            <td>
                @if (product.IsAvailable)
                {
                    <span class="oi oi-check" aria-hidden="true"></span>
                }
                else
                {
                    <span class="oi oi-x" aria-hidden="true"></span>
                }
            </td>
            <td>
                <a class="btn btn-success" href="product/edit/@product.Id">Edit</a>
                <button class="btn btn-danger" @onclick="@(() => Delete(product.Id))">Delete</button>
            </td>
        </tr>
    }
</table>


@code {
    private string controllerRoute = "api/product";
    private ProductDto[] Dtos { get; set; } = new ProductDto[0];

    private string searchBarInput = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
    }
    private async Task RefreshProducts()
    {
        if (string.IsNullOrWhiteSpace(searchBarInput))
        {
            Dtos = await client.GetFromJsonAsync<ProductDto[]>($"{controllerRoute}");
        }
        else
        {
            Dtos = await client.GetFromJsonAsync<ProductDto[]>($"{controllerRoute}/{searchBarInput}");
        }
    }
    private async Task Delete(int id)
    {
        var dto = Dtos.First(x => x.Id == id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {dto.Name}'s ({dto.Id}) Record?"))
        {
            string token = await cookieService.ReadCookie("Authorization");
            var response = await http.DeleteAsync($"{controllerRoute}/{id}", token);

            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                await js.InvokeVoidAsync("alert", $"Something went wrong!");
            }

            await RefreshProducts();
        }
    }
}
