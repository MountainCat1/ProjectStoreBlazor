@page "/login"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

@inject ICookieService cookieService;

<h3>Login</h3>


<EditForm Model="@dto" OnValidSubmit="@LoginUser">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Username:</label>
        <div>
            <InputText @bind-Value="@dto.Username" />
            <ValidationMessage For="@(() => dto.Username)" />
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Password:</label>
            <div>
                <InputText @bind-Value="@dto.Password" />
                <ValidationMessage For="@(() => dto.Password)" />
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-success">
        @ButtonText
    </button>
</EditForm>

@code {
    private string controllerRoute = "api/user";

    private LoginDto dto { get; set; } = new LoginDto();

    public string ButtonText { get; set; } = "Login";

    private async Task LoginUser()
    {
        var response = await http.PostAsJsonAsync($"{controllerRoute}/login", dto);

        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string token = await response.Content.ReadAsStringAsync();

            //await js.InvokeAsync<object>("WriteCookie.WriteCookie", "Authorization", $"{token}", DateTime.Now.AddMinutes(1));
            await cookieService.WriteCookie("Authorization", token);

            await js.InvokeVoidAsync("alert", $"Login successful!");
            uriHelper.NavigateTo("");
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Login failed!");
        }
    }
}
