@page "/login"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

@inject ICookieService cookieService;

<div class="d-flex justify-content-around">
    <div class="card" style="min-width: 30%">
        <div class="card-header">
            <ul class="nav nav-tabs card-header-tabs">
                <li class="nav-item">
                    <NavLink class="nav-link" href="register">
                        Register
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="login">
                        <b>Login</b>
                    </NavLink>
                </li>
            </ul>
        </div>
        <div class="card-body p-3">
            <div class="pl-5 pr-5">
                <LoginForm OnValidSubmit=@LoginUser Dto=@dto />
            </div>
        </div>
    </div>
</div>



@code {
    private string controllerRoute = "api/user";

    private LoginDto dto { get; set; } = new LoginDto();

    public string ButtonText { get; set; } = "Login";

    private async Task LoginUser()
    {
        var response = await http.PostAsJsonAsync($"{controllerRoute}/login", dto);

        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            string token = await response.Content.ReadAsStringAsync();

            //await js.InvokeAsync<object>("WriteCookie.WriteCookie", "Authorization", $"{token}", DateTime.Now.AddMinutes(1));
            await cookieService.WriteCookie("Authorization", token);

            await js.InvokeVoidAsync("alert", $"Login successful!");
            uriHelper.NavigateTo("");
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Login failed!");
        }
    }
}
